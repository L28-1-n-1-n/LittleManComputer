# This is a recursive function to reduce the input
# number quadratically, until negative is reached
# even number divided by 2 is outputted as sum of
# all previous subtractions that grew by power
# of 2, and the remaining number fed into the
# recursive function, until 1 or 0 is reached

# input and storage of variables

	IN	
	STO	orig
	STO	num
	STO	tmp
	OUT

# handle case where input is 1

	SUB	one
	BRZ 	seul

# recursive function, each time subtracting
# twice the last subtracting factor
# for example, if we subtract 2 in the last cycle
# we will subtract 4 in this cycle
# tmp is original number -(2+4+8+16+...) until 
# tmp reaches zero, then it is an even number
# or tmp reaches negative

start	LDA	tmp
	SUB	lastquo
	SUB	lastquo
	STO	tmp
	BRZ	even
	BRP	adjust	

# negative tmp means either odd or smaller than
# next sum of power of two

	LDA	num
	SUB	evensum
	SUB	evensum
	STO	tmp
	SUB	one
	BRZ	odd

# case NOT_ODD: remainder of tmp fed into next
# cycle of recursion

	LDA	one
	STO	lastquo
	BR	start

# case ODD: print appropriate output 
# and reset all variables

odd	LDA	orig

# handle overflow

	SUB	lim
	BRP	error
	LDA	orig
	ADD	orig
	ADD	orig
	ADD	one
	STO	orig
	STO	num
	STO	tmp
	OUT
	LDA	one
	STO	lastquo
	LDA	zero
	STO	evensum
	BR	start

# case EVEN: print output as sum of all previous
# powers of two subtracted from original number

even	LDA	evensum
	ADD	lastquo
	OUT
	STO	num
	STO	tmp
	STO	orig

# ending condition: when 1 is reached

	SUB	one
	BRZ	seul

# ending condition not met: reset variables and
# enter next cycle of recursion with remainder

	LDA	one
	STO	lastquo
	LDA	zero
	STO	evensum
	BR	start
error	LDA	zero
	OUT
	HLT
# subtracting factor is adjusted here 

adjust	LDA	evensum
	ADD	lastquo
	STO	evensum
	LDA	lastquo
	ADD	lastquo
	STO	lastquo
	BR	start
seul	HLT
orig	DAT	000
num	DAT	000
tmp	DAT	000
count	DAT	000
one	DAT	001
two	DAT	002
lim	DAT	332
lastquo	DAT	001
evensum DAT		000
zero	DAT	000




































